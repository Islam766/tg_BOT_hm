"""
–ò–≥—Ä–∞ –í–∏—Å–µ–ª–∏—Ü–∞.
"""
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .json —Ñ–∞–π–ª–∞–º–∏
import json
# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
import random

from telebot import types

import os


ID = 0
HP = 1
WORD = 2
GUESS = 3
LETTERS = 4
THEME = 5
HINT = 6

TRANSLATION_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Translations/hangman.json")
CATEGORIES_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), "categories.json")

with open(TRANSLATION_PATH, "r", encoding="utf8") as read:
    translations_HM = json.load(read)

with open(CATEGORIES_PATH, "r", encoding="utf8") as read:
    json_categories = json.load(read)

# –¢–µ–ª–µ–≥—Ä–∞–º ID –ö–∏—Ä–∏–ª–ª–∞
MY_ID = -544154569

# –ë–∫—É–≤—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
ABC = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split() + [' ']*6
ABC_RU = '–ê –ë –í –ì –î –ï –ñ –ó –ò –ô –ö –õ –ú –ù –û –ü –† –° –¢ –£ –§ –• –¶ –ß –® –© –™ –´ –¨ –≠ –Æ –Ø'.split()
# –°–ø–∏—Å–æ–∫ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
SWITCHER = {0: 1, 1: 0}
CATEGORIES = ["ALL", "ANIMALS", "EAT", "HOUSE", "CLOTHES", "SCHOOL",
              "MUSIC", "PROFESSIONS", "PC", "NATURE", "SPORT", "BODY"]


class Hangman:
    """
    –ö–ª–∞—Å—Å –∏–≥—Ä—ã –í–∏—Å–µ–ª–∏—Ü–∞.
    """
    players = []

    call_list = CATEGORIES + ABC_RU + ABC + ["Hangman", "language_ru", "language_en", "üö´Ô∏è", "‚¨áÔ∏è", "üí°"]

    @classmethod
    def get_callback(cls, call, bot, lang):
        """
        –ú–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–ª–±–µ–∫–∏.

        :param call: –ö–æ–ª–±–µ–∫
        :param bot: –ë–æ—Ç
        :param lang: –Ø–∑—ã–∫
        """
        cls.__flag = True
        tmp_player = cls.player_founder(call.message)
        if call.data == "Hangman":
            if tmp_player[HP] <= 0:
                # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
                keyboard = cls.create_keyboard(lang)

                if call.id is None:
                    bot.send_message(chat_id=call.message.chat.id, reply_markup=keyboard,
                                     text=translations_HM["categories"][lang])
                else:
                    bot.edit_message_text(chat_id=call.message.chat.id, reply_markup=keyboard,
                                          text=translations_HM["categories"][lang],
                                          message_id=call.message.message_id)
            else:
                if call.id is None:
                    msg = bot.send_message(chat_id=call.message.chat.id, text=translations_HM["still_going"][lang])
                    call = types.CallbackQuery(1, None, "Hangman", None, msg)
                cls.hp_visual(call, bot, tmp_player,
                              translations_HM["still_going"][lang], lang)
        elif call.data in CATEGORIES:
            if call.data == "ALL":
                call.data = random.choice(list(CATEGORIES[1:]))
            if tmp_player[HP] <= 0:
                cls.new_player(call, bot, tmp_player, lang)
            else:
                cls.hp_visual(call, bot, tmp_player,
                              translations_HM["still_going"][lang], lang)
        elif call.data in tmp_player[LETTERS] or call.data == 'üí°':
            if call.data == 'üí°':
                tmp_player[HINT] = ' '
                for i in range(0, len(tmp_player[GUESS])):
                    if tmp_player[GUESS][i] == '_':
                        call.data = tmp_player[WORD][i]
                        break
                cls.hp_visual(call, bot, tmp_player, "", lang)
            # –ù–∞—Ö–æ–¥–∏ –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ players
            # –£–±—Ä–∞—Ç—å –±—É–∫–≤—É
            for i in range(0, len(tmp_player[LETTERS]) - 1):
                if tmp_player[LETTERS][i] == call.data:
                    tmp_player[LETTERS][i] = ' '
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–≥–∞–¥–∞–ª
            if str(call.data) in tmp_player[WORD]:
                cls.guess_changer(str(call.data), tmp_player)
                if tmp_player[WORD] == tmp_player[GUESS]:
                    tmp_player[HP] = 0
                    keyboard = cls.end_keyboard(lang)
                    text = translations_HM["you_win"][lang] + ''.join(
                        tmp_player[WORD])
                    bot.edit_message_text(chat_id=call.message.chat.id, reply_markup=keyboard,
                                          text=text, message_id=call.message.message_id)
                    cls.info(" - –ü–æ–±–µ–¥–∞!", bot, call, MY_ID)
                else:
                    cls.hp_visual(call, bot, tmp_player, "", lang)
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—à–∏–±—Å—è
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª
                if tmp_player[HP] <= 1:
                    tmp_player[HP] = 0
                    keyboard = cls.end_keyboard(lang)
                    text = translations_HM["you_lose"][lang] + ''.join(tmp_player[WORD])
                    bot.edit_message_text(chat_id=call.message.chat.id, reply_markup=keyboard,
                                          text=text, message_id=call.message.message_id)
                    cls.info(" - –ü–æ—Ä–∞–∂–µ–Ω–∏–µ.", bot, call, MY_ID)
                else:
                    tmp_player[HP] -= 1
                    cls.hp_visual(call, bot, tmp_player, "", lang)
        elif call.data == "üö´Ô∏è":
            tmp_player[HP] = 0
            keyboard = cls.end_keyboard(lang)
            text = translations_HM["end_message"][lang]
            bot.edit_message_text(chat_id=call.message.chat.id, reply_markup=keyboard,
                                  text=text, message_id=call.message.message_id)
            cls.info(" - –í—ã—Ö–æ–¥.", bot, call, MY_ID)
        elif call.data == "‚¨áÔ∏è":
            bot.edit_message_text(chat_id=call.message.chat.id, reply_markup=None,
                                  text="‚¨áÔ∏è", message_id=call.message.message_id)
            cls.hp_visual(call, bot, tmp_player, "", lang)

    @staticmethod
    def create_keyboard(lang):
        """
        –ú–µ—Ç–æ—Ç–¥, —Å–æ–∑–¥–∞—é—â–∏–π –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã

        :param lang: –Ø–∑—ã–∫
        :return: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        categories_words = [
            types.InlineKeyboardButton(text=translations_HM["ALL"][lang], callback_data="ALL"),
            types.InlineKeyboardButton(text=translations_HM["ANIMALS"][lang], callback_data="ANIMALS"),
            types.InlineKeyboardButton(text=translations_HM["EAT"][lang], callback_data="EAT"),
            types.InlineKeyboardButton(text=translations_HM["HOUSE"][lang], callback_data="HOUSE"),
            types.InlineKeyboardButton(text=translations_HM["CLOTHES"][lang], callback_data="CLOTHES"),
            types.InlineKeyboardButton(text=translations_HM["SCHOOL"][lang], callback_data="SCHOOL"),
            types.InlineKeyboardButton(text=translations_HM["MUSIC"][lang], callback_data="MUSIC"),
            types.InlineKeyboardButton(text=translations_HM["BODY"][lang], callback_data="BODY"),
            types.InlineKeyboardButton(text=translations_HM["SPORT"][lang], callback_data="SPORT"),
            types.InlineKeyboardButton(text=translations_HM["PC"][lang], callback_data="PC"),
            types.InlineKeyboardButton(text=translations_HM["NATURE"][lang], callback_data="NATURE"),
            types.InlineKeyboardButton(text=translations_HM["PROFESSIONS"][lang], callback_data="PROFESSIONS")]

        if lang == 1:
            ru = types.InlineKeyboardButton(text=translations_HM["ru"][lang], callback_data="language_ru")
            en = types.InlineKeyboardButton(text=translations_HM["en"][lang], callback_data="none")
        else:
            en = types.InlineKeyboardButton(text=translations_HM["en"][lang], callback_data="language_en")
            ru = types.InlineKeyboardButton(text=translations_HM["ru"][lang], callback_data="none")

        review = types.InlineKeyboardButton(text=translations_HM["write"][lang], callback_data='review')
        keyboard.add(*categories_words, ru, en, review)

        return keyboard

    @classmethod
    def new_player(cls, call, bot, player, lang):
        """
        –ú–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –∏–≥—Ä–æ–∫–∞

        :param call: –ö–æ–ª–±–µ–∫
        :param bot: –ë–æ—Ç
        :param player: –ò–≥—Ä–æ–∫
        :param lang: –Ø–∑—ã–∫
        """
        # ID - 0, HP - 1, WORD - 2, GUESS - 3, LETTERS - 4, THEME - 5, HINT - 6

        player[THEME] = translations_HM[call.data][lang]
        if call.message.json["reply_markup"]["inline_keyboard"][6][0]["callback_data"] == "none":
            player[LETTERS] = list(ABC_RU)
            player[WORD] = list(random.choice(json_categories[call.data][0]))
            player[THEME] += " (RU)"
        else:
            player[LETTERS] = list(ABC)
            player[WORD] = list(random.choice(json_categories[call.data][1]))
            player[THEME] += " (EN)"

        player[HP] = 6
        player[GUESS] = []
        player[HINT] = 'üí°'

        for i in range(0, len(player[WORD])):
            if player[WORD][i] == '-':
                player[GUESS].append("-")
                player[WORD][i] = '-'
            if player[WORD][i] == '_':
                player[GUESS].append(" ")
                player[WORD][i] = ' '
            else:
                player[GUESS].append("_")

        cls.hp_visual(call, bot, player, "", lang)
        cls.info('\n' + 'üëÅ‚Äçüó® –¢–µ–º–∞: ' + player[THEME] + '\n' + 'üëÅ‚Äçüó® –°–ª–æ–≤–æ: ' + ''.join(player[WORD]) + '\n' +
                 'üëÅ‚Äçüó® user_id: ' + str(call.from_user.id), bot, call, MY_ID)

    # –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
    @classmethod
    def player_founder(cls, message):
        """
        –ú–µ—Ç–æ–¥, –Ω–∞—Ö–æ–¥—è—â–∏–π –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—é

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
        :return: –ò–≥—Ä–æ–∫
        """
        while True:
            for player in cls.players:
                if player[ID] == message.chat.id:
                    return player
            cls.players.append([message.chat.id, 0, [], [], [], '', ''])

    # <3
    @classmethod
    def hp_visual(cls, call, bot, tmp_player, text, lang):
        """
        –ú–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã

        :param call: –ö–æ–ª–±–µ–∫
        :param bot: –ë–æ—Ç
        :param tmp_player: –ò–≥—Ä–æ–∫
        :param text: –î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        :param lang: –Ø–∑—ã–∫
        """
        hp = tmp_player[HP]
        tmp = text + translations_HM["theme"][lang] + tmp_player[THEME] + '\n\n'

        if hp > 0:
            if hp == 6:
                tmp += json_categories["FIRST_POSITION"]
            elif hp == 5:
                tmp += json_categories["SECOND_POSITION"]
            elif hp == 4:
                tmp += json_categories["THIRD_POSITION"]
            elif hp == 3:
                tmp += json_categories["FOURTH_POSITION"]
            elif hp == 2:
                tmp += json_categories["FIFTH_POSITION"]
            elif hp == 1:
                tmp += json_categories["SIXTH_POSITION"]

            tmp += '\n'
            i = 1
            while i <= 6:
                tmp += '['
                if hp >= i:
                    tmp += '‚ù§Ô∏è'
                else:
                    tmp += 'üñ§'
                tmp += '] '
                i += 1
            tmp += '\n' + ' '.join(tmp_player[GUESS])

        keyboard = cls.letters_buttons(tmp_player)
        if call.data == "‚¨áÔ∏è":
            bot.send_message(call.message.chat.id, text=tmp, reply_markup=keyboard)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, reply_markup=keyboard, text=tmp,
                                  message_id=call.message.message_id)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä—ã
    @staticmethod
    def letters_buttons(tmp_player):
        """
        –ú–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –±—É—Å–∫–º–∏

        :param tmp_player: –ò–≥—Ä–æ–∫
        :return: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(row_width=8)

        # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        buttons_added = []
        # –ò –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ—ë –∫–Ω–æ–ø–∫–∏
        for letter in tmp_player[LETTERS]:
            if letter == ' ':
                tmp = types.InlineKeyboardButton(text=' ', callback_data="none")
            else:
                tmp = types.InlineKeyboardButton(text=letter, callback_data=letter)
            buttons_added.append(tmp)
        if tmp_player[HINT] == ' ':
            hint_btn = types.InlineKeyboardButton(text=' ', callback_data="none")
        else:
            hint_btn = types.InlineKeyboardButton(text=tmp_player[HINT], callback_data=tmp_player[HINT])
        exit_btn = types.InlineKeyboardButton(text="üö´Ô∏è", callback_data="üö´Ô∏è")
        re_call = types.InlineKeyboardButton(text="‚¨áÔ∏è", callback_data="‚¨áÔ∏è")
        keyboard.add(*buttons_added, hint_btn,  re_call, exit_btn)
        return keyboard

    @staticmethod
    def end_keyboard(lang):
        """
        –ú–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã

        :param lang: –Ø–∑—ã–∫
        :return: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(row_width=7)
        # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        buttons_added = [
            types.InlineKeyboardButton(text=translations_HM["play_again"][lang],
                                       callback_data="Hangman"),
        ]

        keyboard.add(*buttons_added)
        return keyboard

    # –ö–æ–º—É —è –≤–æ–æ–±—â–µ –≤—Å—ë —ç—Ç–æ –ø–∏—à—É?
    @staticmethod
    def guess_changer(text, tmp_player):
        """
        –ú–µ—Ç–æ–¥, –º–µ–Ω—è—é—â–∏–π –¥–æ–≥–∞–¥–≥—É

        :param text: –ë—É–∫–≤–∞
        :param tmp_player: –ò–≥—Ä–æ–∫
        """
        for i in range(0, len(tmp_player[WORD])):
            if text == tmp_player[WORD][i]:
                tmp_player[GUESS][i] = text

    @staticmethod
    def info(text, bot, call, chat_id):
        """
        –°–µ–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥

        :param text: –î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        :param bot: –ë–æ—Ç
        :param call: –ö–æ–ª–±–µ–∫
        :param chat_id: ID —á–∞—Ç–∞
        :return:
        """

        bot.send_message(chat_id, 'üë§ ' + '–ò–≥—Ä–æ–∫:  ' +
                         str(call.from_user.first_name) + ' ' +
                         str(call.from_user.last_name) + ' (' +
                         str(call.from_user.username) + ')' +
                         text)
